#!/usr/bin/env python3
"""Tool to perform simple Python doc string tests."""

##############################################################################
# Module information.
__author__     = "Dave Pearson"
__copyright__  = "Copyright 2018-2019, Dave Pearson"
__licence__    = "GPL"
__credits__    = [ "Dave Pearson" ]
__maintainer__ = "Dave Pearson"
__email__      = "davep@davep.org"
__version__    = "1.8.0"

##############################################################################
# Imports.
import os
import re
import ast
import sys
import argparse
from   pathlib import Path

##############################################################################
# The list of directories that we'll normally not dive in to.
IGNORABLE_DIRS = [ ".git", ".venv", "__pycache__" ]

##############################################################################
# Get the short name of a path.
def short( path ):
    """Get a short name for the path that makes sense.

    :param pathlib.Path path: The path to get a short name for.
    :returns: As short a name as possible for the given path.
    :rtype: str
    """
    try:
        return path.relative_to( Path().cwd() )
    except ValueError:
        return str( path )

##############################################################################
# Get all of the doc-able nodes in the given module.
def module_docable_parts( module ):
    """Get nodes that can have doc strings.

    :param Module module: The module to pull nodes from.
    :returns: A generator of items that might have a doc string.
    :rtype: AST
    """
    for node in module:
        for item in ast.walk( node ):
            if isinstance( item, ( ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef ) ):
                yield item

##############################################################################
# Get the line count of a doc string.
def line_count( doc_string ):
    """Get the line count of a doc string.

    :param str doc_string: The doc string to get the line count for.
    :returns: The number of lines found in the doc string.
    :rtype: int
    """
    return len( doc_string.splitlines() )

##############################################################################
# Does the given node look like an actual function?
def looks_like_a_function( node ):
    """Does a given node look like a normal function?

    :param AST node: The ast node to check.
    :returns: True if the node looks like a function, False if not.
    :rtype: bool

    This function is designed to report False for functions that have a
    property decorator. Properties would not normally talk about what they
    return, but what their type is.
    """
    return (
        # If it's some sort of function...
        isinstance( node, ( ast.FunctionDef, ast.AsyncFunctionDef ) ) and
        # ...and it doesn't look like an internal...
        not node.name.startswith( "_" ) and
        # ...it's not actually a property.
        not any(
            decorator.id == "property" for decorator in node.decorator_list
            if isinstance( decorator, ast.Name )
        )
    )

##############################################################################
# Does the given node look like a property?
def looks_like_a_property( node ):
    """Does a given node look like a property?

    :param AST node: The ast node to check.
    :returns: True if the node looks like a property, False if not.
    :rtype: bool
    """
    return (
        # If it's some sort of function...
        isinstance( node, ( ast.FunctionDef, ast.AsyncFunctionDef ) ) and
        # ...it's actually a property.
        any(
            decorator.id == "property" for decorator in node.decorator_list
            if isinstance( decorator, ast.Name )
        )
    )

##############################################################################
# Does the given node look like it yields?
def yields( node ):
    """Does the given node look like it yields?

    :param AST node: The ast node to check.
    :returns: True if the node yields, False if not.
    :rtype: bool
    """

    # Yield?
    if isinstance( node, ast.Expr ) and isinstance( node.value, ( ast.Yield, ast.YieldFrom ) ):
        # It is!
        return True

    # Failing that, if it's not a function...
    if not isinstance( node, ( ast.FunctionDef, ast.AsyncFunctionDef ) ):
        # and if it has a body to look inside of...
        if hasattr( node, "body" ):
            # ...does anything in the body look like a yield?
            return any( yields( child ) for child in node.body )

    # Not a yield.
    return False

##############################################################################
# Does the given node look like it returns a value?
def returns_value( node ):
    """Does the given node look like it returns a value?

    :param AST node: The ast node to check.
    :returns: True if a value is returned, False if not.
    :rtype: bool
    """

    # Is it a return statement?
    if isinstance( node, ast.Return ):
        # If so, does it return a value?
        return node.value is not None

    # Failing that, if it's not a function...
    if not isinstance( node, ( ast.FunctionDef, ast.AsyncFunctionDef ) ):
        # and if it has a body to look inside of...
        if hasattr( node, "body" ):
            # ...does anything in the body look like a return?
            return any( returns_value( child ) for child in node.body )

    # Not a return of a value.
    return False

##############################################################################
# Does it look like the function returns something?
def returns_something( node, checker ):
    """Does the given node have a return statement that returns something?

    :param AST node: The ast node to check.
    :param callable checker: The function to check for returned values.
    :returns: True if a value is returned, False if not.
    :rtype: bool

    This function walks the given node and looks to see if there's a Return
    statement, and if it returns an actual value.
    """
    return looks_like_a_function( node ) and any(
        checker( child ) for child in node.body
    )

##############################################################################
# Regular expressions for finding lines with no types.
PARAM_CHECK_RE = re.compile( r"^\s+:param\s([^\s]+):" )
IVAR_CHECK_RE  = re.compile( r"^\s+:ivar\s([^\s]+):" )

##############################################################################
# See that all declared parameters have a type.
def check_for_types( source, finder, typer, doc_string, report ):
    """Check that all listed parameters have a type.

    :param str source: The name of the thing we're going to look at.
    :param Pattern finder: Regular expression for finding a line to check.
    :param str typer: The token that can be used to later-declare a type.
    :param str doc_string: The doc string to check.
    :param callable report: The function for reporting any problem.
    :returns: True if the doc string was okay, False if not.
    :rtype: bool
    """

    # Assume everything will be okay.
    okay = True

    # For each line in the doc string...
    for line in doc_string.splitlines():

        # See if it's something we should look at.
        found = finder.match( line )

        # If it is...
        if found:

            # ...extract the name.
            name, *_ = found.groups()

            # Now, if there isn't a type declaration for it elsewhere in the
            # doc string...
            if f":{typer} {name}:" not in doc_string:
                # ...complain
                okay = report( f"Missing :{source}: type for \"{name}\"" )

    # Return what we found.
    return okay

##############################################################################
# Check that all function parameters get a mention.
def check_all_params_mentioned( node, doc_string, report ):
    """Check that every parameter of the function gets a mention.

    :param AST node: The ast node to check.
    :param str doc_string: The doc string to check.
    :param callable report: The function for reporting any problem.
    :returns: True if all params seem to be documented, False if not.
    :rtype: bool
    """

    def ignore_param( param ):
        """Should we ignore the parameter?

        :param str param: The name of the parameter.
        :returns: A flag to say if we should ignore it.
        :rtype: bool
        """
        return param.startswith( "_" ) or param in [
            "self", "cls"
        ]

    # Assume it's all okay.
    okay = True

    # For each argument in the argument list...
    for arg in node.args.args:
        # ...if it's not one we should ignore...
        if not ignore_param( arg.arg ):
            # ...look to see if it's mentioned as a param in the doc string
            # somewhere. If it isn't...
            if not re.search( rf":param\s+.*?{arg.arg}:", doc_string ):
                # ...complain about that.
                okay = report( f"No :param: documentation for \"{arg.arg}\"" )

    # Return what we found.
    return okay

##############################################################################
# Perform some extra-strong checks on the given doc-string.
def extra_check_doc_string( node, doc_string, report ):
    """Perform extra-strong checks on the doc-string.

    :param AST node: The ast node to check.
    :param str doc_string: The doc string to check.
    :param callable report: The function for reporting any problem.
    :returns: True if the doc string was okay, False if not.
    :rtype: bool
    """

    # Try and be sure that all parameters have some sort of type.
    okay = check_for_types( "param", PARAM_CHECK_RE, "type", doc_string, report )

    # Try and be sure that all instance variables have some sort of type.
    okay = check_for_types( "ivar", IVAR_CHECK_RE, "vartype", doc_string, report ) and okay

    # If it's a function...
    if looks_like_a_function( node ):
        # ...check that all the parameters get mentioned.
        okay = check_all_params_mentioned( node, doc_string, report ) and okay

    # If there's no return information in the doc string...
    if ":returns:" not in doc_string:

        # ...see if a value is returned and complain.
        if returns_something( node, returns_value ):
            okay = report( "No \":returns:\" to match a returned value" )

        # Perhaps the code yields? If so, also complain.
        if returns_something( node, yields ):
            okay = report( "No \":returns:\" to match a yielded value" )

    # If there's a return, there should be an rtype.
    if ":returns:" in doc_string and ":rtype:" not in doc_string:
        okay = report( "No \":rtype:\" for \":returns:\"" )

    # If there's a raises, it shouldn't be without a class to raise.
    if ":raises:" in doc_string:
        okay = report( "No class for \":raises:\"" )

    # If the node looks like a property and there's no type given...
    if looks_like_a_property( node ) and ":type:" not in doc_string:
        okay = report( "Property has no \":type:\"" )

    # Return what we found.
    return okay

##############################################################################
# Check the doc string of the given node
def check_doc_string( args, module, node ):
    """Check the doc string of the given node.

    :param argparse.Namespace args: The command line arguments.
    :param pathlib.Path module: The path of the module we're checking.
    :param AST node: The ast node to check.
    :returns: A flag to say if the doc string looked okay.
    :rtype: bool
    """

    # Assume we're all okay.
    okay = True

    # Work out what name to show.
    try:
        name = node.name
    except AttributeError:
        name = module.name

    # Work out the line number.
    try:
        lineno = node.lineno
    except AttributeError:
        lineno = 0

    # Extract the doc string for the given node.
    doc_string = ast.get_docstring( node, clean=False )

    def report( error ):
        """Report the given error.

        :param str error: The error to report.
        :returns: False
        :rtype: bool
        """
        print( f"{short( module )}: {error}: {name} ({lineno})" )
        return False

    # If we found one...
    if doc_string:
        # If it has more than one line...
        if line_count( doc_string ) > 1:
            # ...check it ends with an empty line. Note that we add a space
            # to the end to ensure that any trailing EOL results in an entry
            # at the end of the list.
            if ( doc_string + " " ).splitlines()[ -1 ].strip():
                # Doesn't look good. Report it.
                okay = report( "Bad doc string ending" )
    else:
        okay = report( "Missing doc string" )

    # If we should do extra checks...
    if doc_string and args.extra_checks:
        # ...perform extra-strong checks.
        okay = extra_check_doc_string( node, doc_string, report ) and okay

    # Return what we found.
    return okay

##############################################################################
# Report that we're ignoring something.
def ignoring( args, thing, reason ):
    """Report an ignored source.

    :param argparse.Namespace args: The command line arguments.
    :param str thing: The thing we're ignoring.
    :param str reason: The reason we're ignoring it.
    """
    if not args.quiet_ignores:
        print( f"{thing}: {reason}, ignoring." )

##############################################################################
# Produce verbose output.
def verbose( args, feedback ):
    """Print output if we're in verbose mode.

    :param argparse.Namespace args: The command line arguments.
    :param str feedback: The feedback to print
    """
    if args.verbose:
        print( feedback, file=sys.stderr )

##############################################################################
# Check the doc strings of a given file.
def check( args, file ):
    """Check the doc strings in the given file.

    :param argparse.Namespace args: The command line arguments.
    :param pathlib.Path file: The name of the file to check.
    :returns: A flag to say if the file looked okay.
    :rtype: bool
    """

    # Set out assuming everything's okay.
    okay = True

    # Feedback on what we're checking.
    verbose( args, f"Checking {short( file )}" )

    try:

        # Load and parse the file.
        with file.open( "rb" ) as source:
            module = ast.parse( source.read() )

        # Check the module itself.
        check_doc_string( args, file, module )

        # For each thing in the module that can have a doc string...
        for node in module_docable_parts( module.body ):
            # ...check its doc string.
            okay = check_doc_string( args, file, node ) and okay

    except SyntaxError:
        ignoring( args, file, "Syntax error" )

    # Return what we thought of the file.
    return okay

##############################################################################
# Does it look like the given file is hidden somehow?
def is_hidden( candidate ):
    """Does the given file look hidden in some way?

    :param pathlib.Path candidate: The candidate file.
    :returns: A flag to say if the file looks hidden.
    :rtype: bool
    """
    return any( parent.name.startswith( "." ) for parent in candidate.parents )

##############################################################################
# Does the given file look like it's a shebang Python script?
def shebang_python( candidate ):
    """Does a given file look like a Python shebang file?

    :param pathlib.Path candidate: The candidate file.
    :returns: A flag to say if the file looks like it might be Python code.
    :rtype: bool
    """
    try:
        with candidate.open( "rb" ) as source:
            first_line = source.readline()
        return first_line.startswith( b"#!" ) and b"python" in first_line
    except IOError:
        return False

##############################################################################
# Does the candidate look like a Python file?
def is_python( candidate ):
    """Does a given file look like it might be Python source?

    :param pathlib.Path candidate: The candidate file.
    :returns: A flag to say if the file looks like it might be Python code.
    :rtype: bool
    """
    return (
        # Is it a .py file?
        candidate.suffix.lower() == ".py" or
        # ...or perhaps a suffixless file with a Python shebang?
        ( candidate.suffix == "" and shebang_python( candidate ) )
    )

##############################################################################
# Should we check a file?
def should_check( candidate ):
    """Should we check the given file?

    :param pathlib.Path candidate: The candidate file.
    :returns: A flag to say if we should check the file or not.
    :rtype: bool

    A file should be check if it isn't hidden and it looks like it's Python
    source.
    """
    return ( not is_hidden( candidate ) ) and is_python( candidate )

##############################################################################
# Remove ignorable directories.
def remove_ignorable_dirs( args, root, dirs ):
    """Remove ignorable directories from the given list.

    :param argparse.Namespace args: The command line arguments.
    :param str root: The root directory we're looking in.
    :param list dirs: The list of directories to be looked at.
    """
    for ignorable in IGNORABLE_DIRS + ( args.ignore or [] ):
        try:
            dirs.remove( ignorable )
            verbose(
                args,
                f"Skipping content of {short( Path( root ).resolve() / ignorable )}/"
            )
        except ValueError:
            pass

##############################################################################
# Perform a recursive check over Python files.
def recursive_check( args, to_check ):
    """Perform a recursive check of Python files.

    :param argparse.Namespace args: The command line arguments.
    :param pathlib.Path to_check: The path to check.
    :returns: A flag to say if any issues were found.
    :rtype: bool
    """

    # Assume everything's okay.
    okay = True

    # Let's walk the whole tree from the given location.
    for root, dirs, files in os.walk( to_check ):

        # Remove directories we should ignore.
        remove_ignorable_dirs( args, root, dirs )

        # For each file we've been given...
        for file in files:

            # Create the fill candidate path.
            candidate = Path( root ).resolve() / file

            # If we should look at the candidate...
            if should_check( candidate ):
                # ...check it.
                okay = check( args, candidate ) and okay
            else:
                verbose( args, f"Skipping {short( candidate )}" )

    # Report if any issues where found.
    return okay

##############################################################################
# Get the command line params.
def get_args():
    """Parse the command line parameters.

    :returns: The parsed command line arguments.
    :rtype: argparse.Namespace
    """

    # Create the argument parser object.
    parser = argparse.ArgumentParser(
        description = "Python doc string checker",
        epilog      = f"v{__version__}"
    )

    # Add --extra-checks
    parser.add_argument(
        "-e", "--extra-checks",
        help   = "Perform extra checks on the doc string.",
        action = "store_true"
    )

    # Add --ignore
    parser.add_argument(
        "-i", "--ignore",
        help   = "Ignore any directory that matches the name.",
        action = "append"
    )

    # Add --quiet-ignores
    parser.add_argument(
        "-q", "--quiet-ignores",
        help   = "Don't report ignored files.",
        action = "store_true"
    )

    # Add --verbose
    parser.add_argument(
        "-v", "--verbose",
        help    = "Be verbose (output what is going on).",
        action  = "store_true"
    )

    # Add --version
    parser.add_argument(
        "-V", "--version",
        help    = "Show version information.",
        action  = "version",
        version = f"%(prog)s v{__version__}"
    )

    # The remainder is the paths/files to check.
    parser.add_argument(
        "to_check",
        metavar = "file/dir",
        nargs   = "*",
        default = [ "." ],
        help    = "Files and directories to check"
    )

    # Parse the command line.
    return parser.parse_args()

##############################################################################
# Main code.
def main():
    """Main entry point.

    :returns: A flag to say if any problems were found.
    :rtype: bool
    """

    # Assume everything is okay.
    okay = True

    try:

        # Get the arguments.
        args = get_args()

        # For each file/directory we've been asked to check...
        for to_check in args.to_check:

            # Try and fully resolve the path.
            try:
                to_check = Path( to_check ).resolve()
            except FileNotFoundError:
                to_check = Path( to_check )

            # If it's simply a file...
            if to_check.is_file():
                # ...just check it.
                okay = check( args, to_check ) and okay

            # If it's a directory...
            elif to_check.is_dir():
                # ...let's go recursive...
                okay = recursive_check( args, to_check ) and okay

            else:
                # Not a file or directory!
                ignoring( args, to_check, "Not a file or directory" )

    except KeyboardInterrupt:
        print( "\nInterrupted by user", file=sys.stderr )
        okay = False

    # Report on what was found.
    return okay

##############################################################################
# Main entry point.
if __name__ == "__main__":
    sys.exit( 0 if main() else 1 )

### pydscheck ends here
